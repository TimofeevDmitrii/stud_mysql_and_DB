1. Ранжированный список пользователей

Инструкция по использованию платформы



Имеется база данных – социальная сеть.

База данных содержит сущности:
users – пользователи;
messages – сообщения;
friend_requests – заявки на дружбу;
communities – сообщества;
users_communities – пользователи сообществ;
media_types – типы медиа;
media – медиа;
likes – лайки;
profiles – профили пользователя.

У сущности «пользователи» имеются следующие поля(атрибуты):
id – идентификатор;
firstname – имя;
lastname - фамилия;
email - адрес электронной почты.

У сущности «сообщения» имеются следующие поля(атрибуты):
id – идентификатор;
from_user_id – отправитель;
to_user_id – получатель;
body - содержимое;
created_at - дата отправки.

Найти количество сообщений, отправленных каждым пользователей.
В зависимости от количества отправленных сообщений рассчитать ранг пользователей, первое место присвоив пользователю(ям) с наибольшим количеством отправленных сообщений.

Вывести полученный ранг, имя, фамилия, пользователя и кол-во отправленных сообщений. Выводимый список необходимо отсортировать в порядке возрастания ранга.


----- Код --------

-- Вы работаете с MySQL
-- Введите свой код ниже

SELECT DENSE_RANK() OVER(ORDER BY COUNT(messages.id) DESC) AS message_rank,
users.firstname, users.lastname, COUNT(messages.id) AS count_messages
FROM users 
LEFT JOIN messages 
ON users.id = messages.from_user_id
GROUP BY users.id;

----- Код --------



Идеальное решение

----- Код --------

-- Вы работаете с MySQL
-- Введите свой код ниже

SELECT 
DENSE_RANK() OVER(ORDER BY COUNT(m.id) DESC) AS rank_message,
u.firstname, 
u.lastname, 
COUNT(m.id) AS cnt
FROM users u 
LEFT JOIN messages m ON u.id = m.from_user_id
GROUP BY u.id
ORDER BY cnt DESC;

----- Код --------




2. Нахождение разности соседних дат

Инструкция по использованию платформы



Имеется база данных – социальная сеть.

База данных содержит сущности:
users – пользователи;
messages – сообщения;
friend_requests – заявки на дружбу;
communities – сообщества;
users_communities – пользователи сообществ;
media_types – типы медиа;
media – медиа;
likes – лайки;
profiles – профили пользователя.

У сущности «сообщения» имеются следующие поля(атрибуты):
id – идентификатор;
from_user_id – отправитель;
to_user_id – получатель;
body - содержимое;
created_at - дата отправки.

Получите список сообщений, отсортированных по возрастанию даты отправки.
Вычислите разность между соседними значениями дат отправки. Разности выразите в минутах.

Выведите идентификатор сообщения, дату отправки, дату отправки следующего сообщения и разницу даты отправки соседних сообщений.



----- Код --------

-- Вы работаете с MySQL
-- Введите свой код ниже

SELECT id, created_at, 
LEAD(created_at, 1) OVER(),
TIMESTAMPDIFF(MINUTE, created_at, LEAD(created_at, 1) OVER())
FROM messages
ORDER BY created_at;

----- Код --------


Идеальное решение


----- Код --------

-- Вы работаете с MySQL
-- Введите свой код ниже

SELECT 
id, 
created_at,
LEAD(created_at) OVER(ORDER BY created_at) AS lead_time,
TIMESTAMPDIFF (MINUTE, created_at, LEAD(created_at) OVER(ORDER BY created_at)) AS minute_lead_diff
FROM messages;

----- Код --------
